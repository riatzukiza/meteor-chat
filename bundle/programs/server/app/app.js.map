{"version":3,"sources":["meteor://ğŸ’»app/api/server/methods.js","meteor://ğŸ’»app/api/server/publications.js","meteor://ğŸ’»app/api/collections.js","meteor://ğŸ’»app/server/main.js"],"names":["Meteor","module","link","v","check","Match","Messages","methods","data","message","String","name","Optional","room","Error","userName","roomName","matchName","match","matchRoom","console","log","insert","createdAt","Date","announcement","publish","find","fields","limit","sort","export","Mongo","Collection","startup"],"mappings":"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","file":"/app.js","sourcesContent":["import {Meteor} from 'meteor/meteor';\nimport {check, Match} from 'meteor/check';\nimport {Messages} from '../collections.js';\n\nMeteor.methods({\n\n    'sendMessage'(data) {\n\n        check(data, {\n            message: String, //the message to send\n            name: Match.Optional(String), //if the user already has a name\n            room: Match.Optional(String)\n        });\n\n        if (data.message == \"\") {\n            throw new Meteor.Error(\"message-empty\", \"Your message is empty\");\n        }\n\n        let userName = (data.name && data.name != \"\") ? data.name : \"Anonymous\";\n        let roomName = (data.room && data.room != \"\") ? data.room : \"Main Room\";\n\n        const matchName = data.message.match(/^My name is (.*)/i);\n        const matchRoom = data.message.match(/^Join room (.*)/i);\n        console.log({data})\n\n        if (matchName && matchName[1] != \"\") {\n            userName = matchName[1];\n            Messages.insert({\n                name: \"Chat Bot\",\n                message: \"Hey everyone, \" + userName + \" is here!\",\n                room:data.room,\n                createdAt: new Date(),\n                announcement: true\n            });\n        } else if(matchRoom && matchRoom[1] != \"\") {\n            // tell everyone you left the old room\n            roomName = matchRoom[1];\n            Messages.insert({\n                name: \"Chat Bot\",\n                message: \"Hey everyone, \" + userName + \" left the room.\",\n                room:data.room,\n                createdAt: new Date(),\n                announcement: true\n            });\n            // tell everyone in the new room you joined\n\n            Messages.insert({\n                name: \"Chat Bot\",\n                message: \"Hey everyone, \" + userName + \" is joined the room\",\n                room:roomName,\n                createdAt: new Date(),\n                announcement: true\n            });\n        } else {\n            Messages.insert({\n                name: userName,\n                message: data.message,\n                room:data.room,\n                createdAt: new Date()\n            });\n        }\n\n        return {\n            name: userName,\n            room: roomName\n        };\n\n    }\n\n});\n","import { Meteor } from 'meteor/meteor';\nimport { Messages } from '../collections.js';\n\nMeteor.publish(\"messages\", function(room) {\n    return Messages.find({room}, {\n        fields: {\n            name: 1,\n            message: 1,\n            room: 1,\n            createdAt: 1,\n            announcement: 1\n        },\n        limit: 100,\n        sort: {\n            createdAt: -1\n        }\n    }); //we want the 100 most recent messages\n});\n","import { Mongo } from 'meteor/mongo';\n\n//declare the Mongo collections to use\n\nexport const Messages = new Mongo.Collection('messages');","import { Meteor } from 'meteor/meteor';\n\nMeteor.startup(() => {\n  // code to run on server at startup\n});\n"]}